// Copyright (c) 2024.4 G-Konvini. All rights reserved
// Algorithm Refer: Saito and Toriwaki [1994]
// Author: Takeshi

#pragma kernel Process0
#pragma kernel Process1

uniform float4 _TexSize;
uniform float _Scale;
uniform Texture2D _Raw;
uniform RWTexture2D<float2> _DataProcess0;
uniform RWTexture2D<half> _Result;

[numthreads(32,1,1)]
void Process0 (uint2 id : SV_DispatchThreadID)
{
    uint size = _TexSize.x;
    float2 d = float2(999999,999999);
    float2 sqr_d;
    
    for (uint i = 0; i < size; ++i)
    {
        float raw = _Raw[uint2(i,id.x)].x;
        if (raw < 1)
        {
            d.x = raw > 0? raw : 0;
            
            d.y += 1 - raw;
            sqr_d = float2(d.x, d.y * d.y);
        }
        else
        {
            d.x += 1;
            sqr_d = float2(d.x * d.x, 0);
            
            d.y = 0;
        }
        _DataProcess0[uint2(i,id.x)] = sqr_d;
        AllMemoryBarrier();
    }
    
    for (int j = size - 1; j >= 0; --j)
    {
        float raw = _Raw[uint2(j,id.x)].x;
        
        if (raw < 1)
        {
            d.x = raw > 0? raw : 0;
            
            d.y += 1 - raw;
            sqr_d = float2(d.x, d.y * d.y);
        }
        else
        {
            d.x += 1;
            sqr_d = float2(d.x * d.x, 0);
            
            d.y = 0;
        }
        const float2 row_dist = _DataProcess0[uint2(j,id.x)];
        _DataProcess0[uint2(j,id.x)] = min(sqr_d, row_dist);
        AllMemoryBarrier();
    }
    
}

[numthreads(32,32,1)]
void Process1 (uint2 id : SV_DispatchThreadID)
{
    float2 sdpo; /* Sqared distance Per Orientation */
    uint size = _TexSize.y;
    float2 min_sqr_d = id.yy * id.yy + _DataProcess0[uint2(id.x,0)];
    
    for (uint i = 1; i < size ; ++i)
    {
        uint2 dist = i - id.y;
        float2 sqr_d = dist * dist;
        sdpo = sqr_d + _DataProcess0[uint2(id.x,i)];
        min_sqr_d = min(sdpo, min_sqr_d);
    }
    
    if (min_sqr_d.x > 0)
    {
        _Result[id] = (sqrt(min_sqr_d.x)/(size * 2 / _Scale )  + 0.5);
    }
    else
    {
        _Result[id] = (0.5 - sqrt(min_sqr_d.y)/(size * 2 / _Scale ));
    }
    
}